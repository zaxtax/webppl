#!/usr/bin/env node

'use strict';

var fs = require('fs');
var webppl = require('./src/main');
var util = require('./src/util');
var parseArgs = require('minimist');
var path = require('path');
var git = require('git-rev-2');

function asArray(xs){
  return (xs ? ((xs instanceof Array) ? xs : [xs]) : []);
}

function isErp(x){
  return (x && (x.score != undefined) && (x.sample != undefined));
}

function isErpWithSupport(x){
  return (isErp(x) && (x.support != undefined));
}

function printWebPPLValue(x){
  if (isErpWithSupport(x)){
    console.log('ERP:');
    var erpValues = x.support([]);
    erpValues.forEach(
      function(value){
        console.log('    ' + value + ': ' + Math.exp(x.score([], value)));
      });
  } else {
    console.log(x);
  }
}

function getRequireName(req){
  var name, xs;
  xs = req.split('/');
  name = xs[xs.length-1];
  xs = name.split('.');
  name = xs[0];
  return name;
}

function getRequirePath(req){
  if (req.indexOf("/") != -1){
    try {
      return require.resolve(path.join(process.cwd(), req));
    } catch (e) {
      return require.resolve(req);
    }
  } else {
    return req;
  }
}

function run(code, requires, verbose){
  requires.forEach(
    function(req){
      if (req.type === 'require-js'){
        global[req.name] = require(req.path);
      } else if (req.type === 'require-header') {
        top.requireAsGlobal(req.path);
      } else if (req.type === 'require-wppl') {
        var reqCode = fs.readFileSync(req.path, 'utf8');
        code = reqCode + ';' + code;
      } else {
        throw 'unknown require type: ' + req.type;
      }
    });
  webppl.webppl_eval(
    function(s, x){
      console.log("\n* Program return value:\n");
      printWebPPLValue(x);
    },
    code,
    verbose);
}

function compile(code, requires, verbose, outputFile){
  var compiledCode = '';
  compiledCode += top.requireAsGlobal.toString() + ';\n';
  requires.push({
    name: 'webppl',
    path: require.resolve('./src/main'),
    type: 'require-js'
  });
  requires.forEach(
    function(req){
      if (req.type === 'require-js'){
        compiledCode += "var " + req.name + " = require('" + req.path + "');\n";
      } else if (req.type === 'require-header') {
        compiledCode += "top.requireAsGlobal('" + req.path + "');\n";
      } else if (req.type === 'require-wppl') {
        var reqCode = fs.readFileSync(req.path, 'utf8');
        code = reqCode + ';' + code;
      } else {
        throw 'unknown require type: ' + req.type;
      }
    });
  compiledCode += (
    "var _trampoline;\n" +
    isErp.toString() + '\n' +
    isErpWithSupport.toString() + '\n' +
    printWebPPLValue.toString() + '\n' +
    "var topK = function(s, x){ " +
    " _trampoline = null; " +
    " console.log('\\n* Program return value:\\n');" +
    " printWebPPLValue(x); };\n");
  compiledCode += webppl.compile(code, verbose);
  // Write Javascript code to file
  fs.writeFile(
    outputFile,
    compiledCode,
    function(err) {
      if (err) {
        console.log(err);
      } else {
        console.log("Wrote webppl code to", outputFile);
      }
    });
}

function main(){

  var argv = parseArgs(process.argv.slice(2));

  // Print version if requested
  if (argv.version){
    git.branch(
      __dirname,
      function(err, branch){
        __dirname,
        git.short(
          function(err, shortName){
            console.log(branch, shortName, __dirname);
          });
        }
    );
    return;
  };

  // Return if no file argument given
  if (argv._[0] === undefined){
    console.log('No file argument given! Run webppl as follows:');
    console.log('webppl file.wppl [--compile] [--out file.js] [--require file2.js] [--header file3.js]');
    return;
  }

  // Load webppl code
  var programFile = argv._[0];
  console.log('Processing', programFile);
  var code = fs.readFileSync(programFile);

  var requireTypes = ['require-js', 'require-wppl', 'require-header'];
  var requires = [];
  requireTypes.forEach(
    function(requireType){
      asArray(argv[requireType]).forEach(
        function(id){
          requires.push(
            {name: getRequireName(id),
             path: getRequirePath(id),
             type: requireType
            });});
    });

  var processCode = argv.compile ? compile : run;
  var outputFile = argv.out ? argv.out : "tmp.js";
  processCode(code, requires, argv.verbose, outputFile);
}

main();
